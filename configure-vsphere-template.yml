#!/usr/local/bin/ansible-playbook --inventory=inventory
- hosts: registry,local
  become: true
  vars_files:
  - vars/common.yml
  - vars/environment.yml
  - vars/vault.yml
  vars:
    module: "setup-bastion-vsphere"
    ansible_name_module: " Pre Cluster Installation | {{ module }}"
    terraform_dir: "/root/platform/iac/shaman"
  pre_tasks:
     - name: '{{ ansible_name_module }} | Ensure required variables are set'
       block:
         - assert:
             that:
               - datacenter is defined and datacenter != ""
             msg: " the datacenter  must be set and valid "
         - assert:
             that:
               - datastore is defined and datastore != ""
             msg: " the datastore  must be set and valid "
         - assert:
             that:
               - vcenter_server is defined and vcenter_server != ""
             msg: " the vcenter_server must be set and valid "
         - assert:
             that:
               - vsphere_cluster is defined and vsphere_cluster != ""
             msg: " the vsphere_cluster must be set and valid "
         - assert:
             that:
               - vcenter_user is defined and vcenter_user != ""
             msg: " the vcenter_user must be set and valid "
         - assert:
             that:
               - vcenter_passwd is defined and vcenter_passwd != ""
             msg: " the vcenter_passwd must be set and valid "
         - assert:
             that:
               - cluster_name  is defined and cluster_name != ""
             msg: " the cluster_name must be set "
         - assert:
             that:
               - cluster_base_domain is defined and cluster_base_domain != ""
             msg: " the cluster_base_domain must be set and valid and will be the base domain used for cluster dns "
         - assert:
             that:
               - guest_id is defined and guest_id != ""
             msg: " the guest_id must be set and valid "
         - assert:
             that:
               - folder is defined and folder != ""
             msg: " the folder must be set and valid "
         - assert:
             that:
               - resource_pool_id is defined and resource_pool_id != ""
             msg: " the resource_pool_id must be set and valid "
         - assert:
             that:
               - network_id is defined and network_id != ""
             msg: " the network_id must be set and valid "
         - assert:
             that:
               - network_adapter_type is defined and network_adapter_type != ""
             msg: " the network_adapter_type must be set and valid "
         - assert:
             that:
               - ova_file is defined and ova_file != ""
             msg: " the ova_file must be set and valid "
         - assert:
             that:
               - registry_ca_file is defined and registry_ca_file != ""
             msg: " the registry_ca_file must be set to a fully qualified file path and be a valid pem cert file"
         - assert:
             that:
               - registry_pull_secret_file is defined and registry_pull_secret_file != ""
             msg: " the registry_pull_secret_file must be set to a fully qualified file path and be a valid json"

  tasks:
    - name: '{{ ansible_name_module }} | command:which | check if govc is installed '
      command: which govc
      ignore_errors: yes
      failed_when:
        - govc_binary_check.rc > 0
        - "not 'no govc' in govc_binary_check.stderr"
      register: govc_binary_check

    - name: '{{ ansible_name_module }} | template | Create template options file'
      template:
        src: templates/RHCOS.json.j2
        dest: '{{ terraform_dir}}/RHCOS.json'

    - name: '{{ ansible_name_module }} | shell:govc | Create folder'
      shell: >
        {{ govc_binary_check.stdout }} folder.create -dc={{ datacenter }} {{ folder }}
      args:
        chdir: '{{ terraform_dir }}'
      environment:
        GOVC_INSECURE: "true"
        GOVC_PASSWORD: "{{ vcenter_passwd }}"
        GOVC_USERNAME: "{{ vcenter_user }}"
        GOVC_URL: "{{ vcenter_server }}"
      when:
        - create_folder is defined
        - create_folder | bool
        - govc_binary_check.rc is defined
        - govc_binary_check.rc == 0
        - govc_binary_check.stdout is defined
        - govc_binary_check.stdout != ''
      register: folder_result
      changed_when:
      - folder_result.rc == 0
      failed_when:
      - '"already exists" not in folder_result.stderr'
      - folder_result.rc != 0
    
    - name: '{{ ansible_name_module }} | shell:govc | Import ova template'
      shell: >
        {{ govc_binary_check.stdout }} import.ova -options=RHCOS.json -name={{ rhcos_template }} -folder={{ folder }} -ds={{ datastore }} -dc={{ datacenter }} {{ ova_file_uri }}
      args:
        chdir: '{{ terraform_dir }}'
      environment:
        GOVC_INSECURE: "true"
        GOVC_PASSWORD: "{{ vcenter_passwd }}"
        GOVC_USERNAME: "{{ vcenter_user }}"
        GOVC_URL: "{{ vcenter_server }}"
      when:
        - govc_binary_check.rc is defined
        - govc_binary_check.rc == 0
        - govc_binary_check.stdout is defined
        - govc_binary_check.stdout != ''
      register: import_result
      changed_when:
      - import_result.rc == 0
      - import_result.stderr.find('Uploading disk.vmdk')
      failed_when:
      - '"already exists" not in import_result.stderr'
      - import_result.rc != 0
    
    - name: '{{ ansible_name_module }} | shell:govc | Update vm template hardware version'
      shell: >
        {{ govc_binary_check.stdout }} vm.upgrade -version={{ vm_template_hw_version }} -vm {{ rhcos_template }} 
      args:
        chdir: '{{ terraform_dir }}'
      environment:
        GOVC_INSECURE: "true"
        GOVC_PASSWORD: "{{ vcenter_passwd }}"
        GOVC_USERNAME: "{{ vcenter_user }}"
        GOVC_URL: "{{ vcenter_server }}"
      when:
        - vm_template_hw_version is defined
        - vm_template_hw_version != ''
        - govc_binary_check.rc is defined
        - govc_binary_check.rc == 0
        - govc_binary_check.stdout is defined
        - govc_binary_check.stdout != ''
      register: vmupdate_result
      changed_when:
      - vmupdate_result.rc == 0
      - vmupdate_result.stderr.find('Uploading disk.vmdk')
      failed_when:
      - '"tbd" not in vmupdate_result.stderr'
      - vmupdate_result.rc != 0

    - name: '{{ ansible_name_module }} | shell:govc | Change guest ID'
      shell: >
         {{ govc_binary_check.stdout }} vm.change -vm.ipath='/{{ datacenter }}/vm/{{ folder }}/{{ rhcos_template }}' -g={{ guest_id }}
      args:
        chdir: '{{ terraform_dir }}'
      when:  import_result.stderr.find('already exists')
      environment:
        GOVC_INSECURE: "true"
        GOVC_PASSWORD: "{{ vcenter_passwd }}"
        GOVC_USERNAME: "{{ vcenter_user }}"
        GOVC_URL: "{{ vcenter_server }}"
      when:
        - govc_binary_check.rc is defined
        - govc_binary_check.rc == 0
        - govc_binary_check.stdout is defined
        - govc_binary_check.stdout != ''
